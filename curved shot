local peekChance = 0.45
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local players = game:GetService("Players")
local mouse = player:GetMouse()

local function isPlayerStandingStill()
    return humanoid.MoveDirection.Magnitude == 0
end

local function isPlayerBehindCover()
    local rayOrigin = character.Head.Position
    local rayDirection = character.Head.CFrame.LookVector * 100
    
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    
    if raycastResult and raycastResult.Instance then
        return true
    else
        return false
    end
end

local function getClosestPlayerToCursor()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, otherPlayer in pairs(players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character then
            local otherCharacter = otherPlayer.Character
            local head = otherCharacter:FindFirstChild("Head")
            if head then
                local screenPosition, onScreen = workspace.CurrentCamera:WorldToScreenPoint(head.Position)
                if onScreen then
                    local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - Vector2.new(mouse.X, mouse.Y)).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        closestPlayer = otherPlayer
                    end
                end
            end
        end
    end

    return closestPlayer
end

local function copyMovementFromPlayer(targetPlayer)
    if targetPlayer and targetPlayer.Character then
        local targetHumanoid = targetPlayer.Character:FindFirstChild("Humanoid")
        local targetMoveDirection = targetHumanoid.MoveDirection
        humanoid:Move(targetMoveDirection, true)
    end
end

local function checkPeeking()
    if isPlayerStandingStill() and isPlayerBehindCover() then
        local randomChance = math.random()

        if randomChance <= peekChance then
            local closestPlayer = getClosestPlayerToCursor()
            if closestPlayer then
                copyMovementFromPlayer(closestPlayer)
            end
        end
    end
end

local function opponentPeeks()
    checkPeeking()
end
